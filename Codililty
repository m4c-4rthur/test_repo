/**

BinaryGap
Find longest sequence of zeros in binary representation of an integer.
**/

public static int solution(int N) {
        char[] arr = Integer.toBinaryString(N).toCharArray();
        boolean found = false;
        int finalCount= 0;
        int tempCount= 0;
        for(int i=0;i<arr.length;i++){
        	
        	if(arr[i]=='0'){
        		tempCount++;
        		found = true;
        	}
        	if(arr[i]=='1'){
        		if(found){
        			finalCount = tempCount > finalCount ? tempCount : finalCount;
        		}
        		found = false;
        		tempCount = 0;
        	}
        }
        return finalCount;
    }

/**

OddOccurrencesInArray
Find value that occurs in odd number of elements.
**/
 public int solution(int[] A) {
        Arrays.parallelSort(A);
        if(A.length == 1){
        	return A[0];
        }
        for(int i = 0 ; i< A.length; i++){
        	if(i+1==A.length )
        		return A[i];
        	if(A[i] != A[i+1]){
        		return A[i];
        	}
    		i++;
        }
        return 0;
    }
    
    /**

CyclicRotation
Rotate an array to the right by a given number of steps.
**/
      public int[] solution(int[] A, int K) {
        if(A.length < 1){
    		return A;
    	}
    	for (int i = 0 ; i<K ; i++){
    		int[] tmp = new int[A.length];
    		tmp[0] = A[A.length-1];
    		for(int j = 0 ; j< A.length-1;j++){
    			tmp[j+1] = A[j];
    		}
    		
    		A = tmp;
    	}
    	
    	return A;
    	
    }
   
      /**

FrogJmp
Count minimal number of jumps from position X to Y
**/
    public int solution(int X, int Y, int D) {
        return (int) Math.ceil((double)(Y-X)/D) ;
    }
    
/**
PermMissingElem
Find the missing element in a given permutation.
**/
    public int solution(int[] A) {
        Arrays.parallelSort(A);
        int temp =1;
        for(int i=0 ; i<A.length;i++) {
            if(A[i] != temp)
                return temp;
            temp++;
        }
        
        return temp;
    }
    
    1. MissingInteger
        Find the smallest positive integer that does not occur in a given sequence
    
     public int solution(int[] A) {
     Arrays.sort(A);
        int max = 0;
        boolean found =false;
        if(A[0] > 1)
            return 1;
        for(int i=0 ;i<A.length;i++) {
            if(A[i] == 1)
                found = true;
            if(i == A.length-1) {
                max = A[i];
                break;
            }
            if(A[i] < 0)
                continue;
            if(A[i]+1 != A[i+1] && A[i] != A[i+1])
                return A[i]+1;
        }
        
        return found ? max > 0 ? max+1 : 1 : 1; 
    }
